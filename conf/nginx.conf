#运行用户
#user protrade;    
#启动进程,通常设置成和cpu的数量相等
worker_processes  1;

#全局错误日志及PID文件
error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

#工作模式及连接数上限
events {
    #use  epoll; #epoll是多路复用IO(I/OMultiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
    worker_connections  1024;#单个后台worker process进程的最大并发链接数
    # multi_accept on; 
}

#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {

    #设定负载均衡的服务器列表
    upstream tornadoes {
        #weigth参数表示权值，权值越高被分配到的几率越大
        server 127.0.0.1:8000;
        #server 127.0.0.1:8001;
        #server 127.0.0.1:8002;
        #server 127.0.0.1:8003;
        #server 127.0.0.1:8004;
    }

    #设定mime类型,类型由mime.type文件定义
    include      /usr/local/etc/nginx/mime.types;
    default_type  application/octet-stream;
    #设定日志格式
    access_log    /var/log/nginx/access.log;

    #sendfile指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
    #必须设为on,如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    #tcp_nopush     on;

    #连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;
    proxy_read_timeout 200;

    tcp_nodelay        on;

    #开启gzip压缩
    gzip  on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";

    #设定请求缓冲
    client_header_buffer_size    1k;
    large_client_header_buffers  4 4k;

    # Only retry if there was a communication error, not a timeout
    # on the Tornado server (to avoid propagating "queries of death"
    # to all frontends)
    proxy_next_upstream error;
  
   server {
        #侦听80端口
        listen 80;
        server_name  www.example.com *.example.org;
  
        location /static/ {
            root /var/www/static;
            if ($query_string) {
                expires max;
            }
        }

        #默认请求
        location / {
            proxy_pass_header Server;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_pass http://tornadoes;
        }

        # 定义错误提示页面
        error_page   500 502 503 504 /50x.html;  
        location = /50x.html {
        root   /root;
    }
      
    #设定查看Nginx状态的地址
    location /NginxStatus {
        #stub_status           on;
        access_log             on;
        auth_basic             "NginxStatus";
        auth_basic_user_file conf/htpasswd;
        }
    }
}